// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id Int @id @default(autoincrement())
  name String
  description String
  category String
  inventories Inventory[]
  orders Order[]
}

model Warehouse {
  id Int @id @default(autoincrement())
  name String
  location String
  inventories Inventory[]
}

model Inventory {
  id Int @id @default(autoincrement())
  product Product @relation(fields: [productId], references: [id])
  productId Int
  warehouse Warehouse @relation(fields: [warehouseId], references: [id])
  warehouseId Int
  quantity Int
  
  @@unique([productId, warehouseId])
}

model Order {
  id Int @id @default(autoincrement())
  product Product @relation(fields: [productId], references: [id])
  productId Int
  warehouse Warehouse @relation(fields: [warehouseId], references: [id])
  warehouseId Int
  quantity Int
  status OrderStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shipment Shipment?
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELAYED
  DELIVERED
  CANCELLED
}

model Shipment {
  id Int @id @default(autoincrement())
  order Order @relation(fields: [orderId], references: [id])
  orderId Int @unique
  expectedDeliveryDate DateTime
  actualDeliveryDate DateTime?
  status ShipmentStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
}

enum ShipmentStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELAYED
  DELIVERED
}